#include "../WTBamboo.h"

uint16 StackDepth=16;

uint16 WT_OPENGL_LIGHTS=8;

uint8 WT_STARTING_CAMERA_SLOTS=2;

uint8 WT_STARTING_VIEWPORT_SLOTS=2;

uint8 WT_TEXTURE_NUMBER_ALLOWED=2;

uint8 WT_COLLISION_HANDLER_TYPE=WT_COLLISION_HANDLER_TYPE_TYPE;

uint8 WT_COLLISION_DEFAULT_TYPE=WT_COLLISION_RADIUS;

float WT_RAY_ANGLE_RANGE=0.05f;

bool WT_ALLOW_DYNAMIC_TEXTURES=1;

uint16 WT_COLLISION_HANDLER_SIZE=4;

uint8 WT_COLLISION_HANDLER_DIMENSIONS=WT_COLLISION_HANDLER_DIMENSIONS_3D;

float WT_COLLISION_SPACE_SIZE=10.0f;

uint8 WT_COLLISION_DEPTH=16;

/// The environments Gravity Setting for the X axis. This will only affect cGravityParticles and cMovement.
float _GRAVITY_X=0.0f;
/// The environments Gravity Setting for the Y axis. This will only affect cGravityParticles and cMovement.
float _GRAVITY_Y=9.8f;
/// The environments Gravity Setting for the Z axis. This will only affect cGravityParticles and cMovement.
float _GRAVITY_Z=0.0f;

/// The environments wind Settings for the X axis. This will only affect cMovement.
float _WIND_X=1.0f;
/// The environments wind Settings for the Y axis. This will only affect cMovement.
float _WIND_Y=0.0f;
/// The environments wind Settings for the Z axis. This will only affect cMovement.
float _WIND_Z=1.0f;

/// The environments 'Mass' factor for the wind. This is a linear factor for how much the wind affects the particles. This will only affect cMovement.
float _WIND_FACTOR=0.1f;

uint16 WT_MAX_PARTICLES=100;

bool WT_PARTICLE_HANDLER_UPDATE_PARTICLE_POSITIONS=1;

float WT_VERTEX_RANGE_CHECK_SIMILAR=0.1f;

bool WT_USE_PARENT_STACK=1;

float WT_LANDSCAPE_TEXTURE_PERCENTAGE_SIZE=0.25f;

uint8 WT_STARTING_FRAMES_PER_SECOND=60;
uint8 WT_STARTING_PROCESSES_PER_FRAME=4;

uint32 WT_COLLISION_HANDLER_ARRAY_SIZE;

float WT_COLLISION_SPACE_SIZE_INV;

float WT_RAY_ANGLE_UPPER;
float WT_RAY_ANGLE_LOWER;

float WT_LANDSCAPE_TEXTURE_ACTUAL_SCALE;
float WT_LANDSCAPE_TEXTURE_PERCENTAGE_SHIFT;

uint16 WT_PAINTER_STARTING_SIZE=20;

void cSettings::SetupVariables()
{

	if (WT_COLLISION_HANDLER_TYPE == WT_COLLISION_HANDLER_TYPE_TYPE) WT_COLLISION_HANDLER_ARRAY_SIZE=WT_COLLISION_HANDLER_SIZE;

	if (WT_COLLISION_HANDLER_TYPE == WT_COLLISION_HANDLER_TYPE_BSP)
	{
		if (WT_COLLISION_HANDLER_DIMENSIONS == WT_COLLISION_HANDLER_DIMENSIONS_1D) WT_COLLISION_HANDLER_ARRAY_SIZE=WT_COLLISION_HANDLER_SIZE;
		if (WT_COLLISION_HANDLER_DIMENSIONS == WT_COLLISION_HANDLER_DIMENSIONS_2D) WT_COLLISION_HANDLER_ARRAY_SIZE=WT_COLLISION_HANDLER_SIZE*WT_COLLISION_HANDLER_SIZE;
		if (WT_COLLISION_HANDLER_DIMENSIONS == WT_COLLISION_HANDLER_DIMENSIONS_3D) WT_COLLISION_HANDLER_ARRAY_SIZE=WT_COLLISION_HANDLER_SIZE*WT_COLLISION_HANDLER_SIZE*WT_COLLISION_HANDLER_SIZE;


		/// This is the inverse of one axis of a spatial partition box.
		WT_COLLISION_SPACE_SIZE_INV=1/WT_COLLISION_SPACE_SIZE;
	}



	WT_RAY_ANGLE_UPPER=3.1416+WT_RAY_ANGLE_RANGE;
	WT_RAY_ANGLE_LOWER=3.1416-WT_RAY_ANGLE_RANGE;


	WT_LANDSCAPE_TEXTURE_ACTUAL_SCALE=sqrt(WT_LANDSCAPE_TEXTURE_PERCENTAGE_SIZE);
	WT_LANDSCAPE_TEXTURE_PERCENTAGE_SHIFT=1.0f-WT_LANDSCAPE_TEXTURE_ACTUAL_SCALE;


}
