#ifndef __WTCPARTICLEGROUP_H__
#define __WTCPARTICLEGROUP_H__

class cParticleSettings
{
public:
	float RGB[8];
	float Speed[6];
	float Fade[2];
	float Position[6];
	float Size[2];

	cParticleSettings &operator=(cParticleSettings &lpOther);

	void SetColours(float *lpRGB);
	void SetSizes(float *lpSize);
	void SetFades(float *lpFade);
	void SetSpeeds(float *lpSpeed);
	void SetPositions(float *lpPos);

};


class cParticleForGroup
/**
 * These Particles will be controlled by cParticleGRoup. They should never be created by the user. cParticle is for User Creation.
 * They should only be generated by a cParticleGroup Object as this will control them.
 */
{

protected:
	cParticleForGroup(){};
public:
	cRGBA Color;
	float Position[3];
	float Speed[3];
	float FadeSpeed;
	float Life;
	float Size;


	~cParticleForGroup(){};
	friend class cParticleGroup;

	virtual void UpdatePos();
	void UpdateFade();

	void Spawn(cParticleSettings &lpData);


	void SetSize(float lpSize);
	void SetFade(float lpFade);
	void SetSpeed(float *lpSpeed);
	void SetPosition(float *lpPos);

	void SetColor(float *lpRGB);
	void SetColor(cRGB *lpRGB);
	void SetColor(cRGBA *lpRGB);
	void SetColor(cRGB &lpRGB);
	void SetColor(cRGBA &lpRGB);
};


/*
 * This will allow Particles to have a local axis (this object and above objects).
 * This will generate the particles and control them. User calls this,
 */
class cParticleGroup : public cRenderObject
{
	cParticleSettings Data;
	cParticleForGroup **mpParticles;
	uint32 miParticles;
	bool mbRespawn;
	bool mbUseGravity;

public:

	cParticleGroup(uint32 liParticles,cRenderNode *lpNode);
	cParticleSettings &Settings(){return Data;};
	~cParticleGroup();
	void Settings(cParticleSettings &lpOther){Data=lpOther;}
	void RespawnAll();
	void RespawnOn(){mbRespawn=true;};
	void Fade(){mbRespawn=false;};

	void Refresh();
	void UseGravity(){mbUseGravity=true;};
	void NotUseGravity(){mbUseGravity=false;};
	void RenderPainter();
	void RenderPainter(uint8 liLevel);
	void RenderToPainter();

};


#endif

