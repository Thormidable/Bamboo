#ifndef __WTCPARTICLEGROUP_H__
#define __WTCPARTICLEGROUP_H__

class cParticleSettings
{
public:
	float RGB[8];
	float Speed[6];
	float Fade[2];
	float Position[6];
	float Size[2];
	
	cParticleSettings &operator=(cParticleSettings &lpOther)
	{
		memcpy(RGB,lpOther.RGB,sizeof(float)*8);
		memcpy(Position,lpOther.Position,sizeof(float)*6);
		memcpy(Speed,lpOther.Speed,sizeof(float)*6);
		memcpy(Size,lpOther.Size,sizeof(float)*2);
		memcpy(Fade,lpOther.Fade,sizeof(float)*2);
		return this[0];
	};
	
	void SetColours(float *lpRGB){memcpy(RGB,lpRGB,sizeof(float)*8);};
	void SetSizes(float *lpSize){memcpy(Size,lpSize,sizeof(float)*2);};
	void SetFades(float *lpFade){memcpy(Fade,lpFade,sizeof(float)*2);};
	void SetSpeeds(float *lpSpeed){memcpy(Speed,lpSpeed,sizeof(float)*6);};
	void SetPositions(float *lpPos){memcpy(Position,lpPos,sizeof(float)*6);};
	
};


class cParticleForGroup
/**
 * These Particles will be controlled by cParticleGRoup. They should never be created by the user. cParticle is for User Creation.
 * They should only be generated by a cParticleGroup Object as this will control them.
 */
{
	
protected:
	cParticleForGroup(){};
public:
	float Color[4];
	float Position[3];
	float Speed[3];
	float FadeSpeed;
	float Life;
	float Size;
	
	
	~cParticleForGroup(){};
	friend class cParticleGroup;
	
	virtual void UpdatePos();
	void UpdateFade(){Life-=FadeSpeed*WT_TIME_IND;};
	
	void Spawn(cParticleSettings &lpData);
	
	void SetColor(float *lpRGB){memcpy(Color,lpRGB,sizeof(float)*4);};
	void SetSize(float lpSize){Size=lpSize;};
	void SetFade(float lpFade){FadeSpeed=lpFade;};
	void SetSpeed(float *lpSpeed){memcpy(Speed,lpSpeed,sizeof(float)*3);};
	void SetPosition(float *lpPos){memcpy(Position,lpPos,sizeof(float)*3);};
};


/*
 * This will allow Particles to have a local axis (this object and above objects).
 * This will generate the particles and control them. User calls this,
 */
class cParticleGroup : public cRenderObject
{
	cParticleSettings Data;
	cParticleForGroup **mpParticles;
	uint32 miParticles;
	bool mbRespawn;
	bool mbUseGravity;
	
public:
	
	cParticleGroup(uint32 liParticles,cRenderNode *lpNode);
	cParticleSettings &Settings(){return Data;};
	~cParticleGroup();
	void Settings(cParticleSettings &lpOther){Data=lpOther;}
	void RespawnAll();
	void RespawnOn(){mbRespawn=true;};
	void Fade(){mbRespawn=false;};
	
	void Refresh();
	void Render();
	void UseGravity(){mbUseGravity=true;};
	void NotUseGravity(){mbUseGravity=false;};
	void RenderPainter();
	void RenderPainter(uint8 liLevel);
	void RenderToPainter();
	
};


#endif

