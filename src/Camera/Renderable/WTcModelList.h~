#ifndef __WTCMODELLIST_H__
#define __WTCMODELLIST_H__

#if WT_FULL_VERSION_BAMBOO

#define WT_MODELLIST_NEWLEVEL 0xFF

class cModelList;

class cModelListNode
{
  vRenderObject *mpObject;
  uint8 miLevel;
  public:
    void LoadNode(cMeshTreeNode *lpNode);
    ~cModelListNode();
    cModelListNode();
    cModelListNode(vRenderObject *lpObject,uint8 liLevel=0);
  friend class cModelList;
};

/**
* \brief Model list is a 'static' render tree holding data for a series of renderable objects. It counts as a single renderable object.
* \param lpTree a pointer to the cMeshTree object loaded from cIMF::LoadIMF()
* \param lpRenderer Places this object beneath lpRenderer in the scene graph.
* This works like a scene graph, The relative depths of the objects is controlled by
* cModelListNode::miLevel. cModelList holds a static array of cModelListNode. cModelListNode holds all the relative data about each object in the render tree.
*/
class cModelList : public vRenderNode
{
// This stores the current depth in render branches.
 int8 miLevel;

// This is the cLinkedNode which owns this renderable object.
   cRenderOwner mcOwnerNode;

    cLimitedPointerList<cModelListNode> mpList;

 cMeshTree *mpMeshTree;
// Static Function to aid finding the size.
static float lsPosition[16];

float mfSize;
public:
 /**
 * \brief This is the constructor for cModelList. It will create the list based on the cMeshTree file lpTree.
 * \param lpTree This is the file containing the data for the structure (and models etc.) of the render tree.
 */
 cModelList(cMeshTree *lpTree);
/**
 * \brief This is the constructor for cModelList. It will create the list based on the cMeshTree file lpTree, and will be owned by lpRenderer.
 * \param lpTree This is the file containing the data for the structure (and models etc.) of the render tree.
 * \param lpRenderer This is the vRenderNode which will own this renderable object.
 */
cModelList(vRenderNode *lpRenderer,cMeshTree *lpTree);

/// Will re-initialise this cModelList using the file lpTree. It will have the structure and models of the file.
void LoadTree(cMeshTree *lpTree);

 /// Create an empty cModelList of size liLength.
 cModelList(uint32 liLength);
 /// Create an empty cModelList of size liLength. lpRenderer will own this ModelList.
 cModelList(vRenderNode *lpRenderer,uint32 liLength);
 ~cModelList();

 ///Will initialise the object.
 void Initialise();

 /// Will reset this object to be an empty cModelList of size liLength.
 void InitialiseList(uint32 liLength);

 /// Will return the current size of the cModelList.
 uint32 ListLength();

///Will return a pointer to the item in Position liPos;
 vRenderObject *GetListItem(uint16 liPos);
 ///Will return the level value of the item in Position liPos;
 uint8 GetItemLevel(uint16 liPos);

 // Renders this cModelList to the cPainter render list.
 void RenderToPainter();


cRenderOwner Add(vRenderObject*);
cRenderOwner Add(vRenderObject *lpNew,uint8 miLevel);
void Remove(cRenderOwner Owner);



///Will delete all Render Obnjects inside this object
 void DeleteAll();

public:

/**
 * \brief This will set a command for a single model in the model list.
 * \param liPos the number of the object in mpList this function will affect.
 * \param liCom The command to be called before rendering model number liPos.
 * The commands determine how the matrix stack is modified before the object is rendered.
 * WT_MODELLIST_NEW_LEVEL will push the current matrix onto the matrix stack.
 * Anything else is the number of matrices that will be popped off the matrix stack.
 */
 void SetLevel(uint16 liPos,uint8 liCom);


};

#endif

#endif
