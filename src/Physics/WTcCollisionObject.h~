#ifndef __WTCCOLLISIONOBJECT_H__
#define __WTCCOLLISIONOBJECT_H__

/**
 * \brief This Object is the base object for detecting collisions.
 * This object should be created and passed a pointer to a Renderable Object and a pointer to a cProcess.
 * This object will track the global position of its Renderable object and detect collisions with other cCollisionObject's.
 **/
class cCollisionObject : public cCollisionBase
{
    friend class cCompoundCollision;
protected:
	static float CollisionDistance;
	/*
	 * This concise little variable determines whether the object has a previous frame to act from. (IE no old matrix, no real position).
	 * An Object can be enabled by calling
	 *
	 */
	bool mbCreatedThisFrame;
	//This is the user assigned type of collision for the purposes of filtering, undesired collisions.
	uint32 miID;
	//This is a pointer to the Renderable Object this Collision Object is following.
	vRenderObject *mpFollowing;
	//This is a pointer to the Process which is linked to this CollisionObject.
	cProcess *mpLinked;

	//This is a pointer to the list that owns this CollisionObject.
	cLinkedNode<cCollisionObject> *mpOwner;


public:
	cCollisionObject(vRenderObject *lpFollow,cProcess *lpLinked=0,uint32 liFilterType=0);


	void Initialise(vRenderObject *lpFollow,cProcess *lpLinked,uint32 liFilterType);

	~cCollisionObject();

	///This will return whether the CollisionObject was created this frame (and so unable to track locations as Global position is unknown)
	bool CreatedThisFrame();
	///This will return whether the CollisionObject was NOT created this frame (and so unable to track locations as Global position is unknown)
	void NotCreatedThisFrame();


	///The Signal Function to allow cCollisionObject to receive Signals.
	void Signal(SIGNAL liFlags);
	using cCollisionBase::SetType;





	/**
	 * * \brief This will check for a collision between this object and the object lpOther.
	 * \param lpOther is a pointer to the other collision object to check against.
	 * It will check both objects have collisions on.
	 * Then it will do an initial quick check to see if a collision is a possibility.
	 * Finally if required it will do a much more detailed collision check.
	 **/
	bool CheckCollision(cCollisionObject *lpOther);

	/**
	 * It is used for quickly detecting if two objects MAY be colliding.
	 * This function is will assume all objects are either Spheres or Beams.
	 * This is a highly inaccurate way of colliding objects, but should filter the majority of collisions from the much slower more accurate collision detection performed elsewhere.
	 **/
	bool TouchCollision(cCollisionObject *lpOther);











	// This is a temporary storage for transfering sizes between objects.
	static float mfStaticSize[3];

	///This will return the Objects Cached Matrix mmCache.
	cMatrix4& CacheMatrix();

	///This will return a pointer the cRenderObject linked to this.
	vRenderObject *RenderObject();

	///This will return the current Collision Filter ID of this object.
	uint32 CollisionFilter();
	///This will set the Collision Filter ID of this object.
	void CollisionFilter(uint32 liID);

	/** This Function will control the collision detection between this object and lpOther.
	 * It will check the filter lpCol to cehck that the other object is of a suitable type.
	 * Then will call CheckCollision(cCollisionObject *lpOther)
	 **/
	bool Collision(cCollisionObject *lpOther,uint32 lpCol);
	/** This Function will control the collision detection between this object and lpOther.
	 * This has no filtering checks for type. It will check for errors and then call CheckCollision(cCollisionObject *lpOther)
	 **/
	bool Collision(cCollisionObject *lpOther);



	/// This will do a sphere collision between two points. lf1 and lf2 are x*x+y*y+z*z. lfR is (Sum of Radii)*(Sum of Radii).
	bool CompareRanges(float lf1,float lf2,float lfR);

	/**
	 * \brief This sets the process that this renderable object will return collision signals to.
	 * \param lpLink Points to the process that this renderable object will return collision signals to.
	 */
	void SetLink(cProcess *lpLink){mpLinked=lpLink;}
	///Returns the process currently linked to this renderable object.
	cProcess *GetLink(){return mpLinked;}
	/// This will generate a collision list of all objects colliding with this object filtered by type liType.
	cCollisionList *GenerateCollisionList(uint32 liType=0);

	/// This will return the position of the selected object.
	float *GetPos();


	/// This will remove the cCollisionObject from it's Spatial Slots before its position is updated.
	void PreUpdateCache();
	/// This will Add the cCollisionObject to the relevant Spatial Slots after it has found it's new position.
	void PostUpdateCache();



    using cCollisionBase::SphereSphere;
	///Internal function for checking for Sphere / Sphere collision between this object and the object lpOther;
	bool SphereSphere(cCollisionObject *lpOther);

	#if WT_FULL_VERSION_BAMBOO

        cCollisionObject(cBeamMesh *lpFollow,cProcess *lpLinked=0,uint32 liFilterType=0);

        using cCollisionBase::ModelModel;
        ///Internal function for checking for Model / Model collision between this object and the object lpOther;
        bool ModelModel(cCollisionObject *lpOther);

        using cCollisionBase::RayRay;
        ///Internal function for checking for Ray / Ray collision between this object and the object lpOther;
        bool RayRay(cCollisionObject *lpOther);

        using cCollisionBase::SphereModel;
        ///Internal function for checking for Sphere / Model collision between this object and the object lpOther;
        bool SphereModel(cCollisionObject *lpOther);

        using cCollisionBase::SphereRay;
        ///Internal function for checking for Sphere / Ray collision between this object and the object lpOther;
        bool SphereRay(cCollisionObject *lpOther);

        using cCollisionBase::RayModel;
        ///Internal function for checking for Ray / Model collision between this object and the object lpOther;
        bool RayModel(cCollisionObject *lpOther);

	using cCollisionBase::SetTypeCompound;
	///This will make a ray object. See cRayCollision::BuildObject(float *lpBounds) for more information. Makes Ray radius to be same as object and ray to follow it's movement.
	cRayCollision *SetType(cRenderObject *lpObj);
	///This will make a ray object. See cRayCollision::BuildObject(float *lpBounds) for more information. Makes Ray radius to be same as object and ray to follow it's movement.
	cRayCollision *SetTypeRay(cRenderObject *lpObj);
	///This will use the cCompoundCollisionFile with reference lcReference.
	cCompoundCollision *SetTypeCompound(string lcReference);
	///This will use the cCompoundCollisionFile pointed to by lpData.
	cCompoundCollision *SetType(cCompoundCollisionFile *lpData);
	///This will use the cCompoundCollisionFile pointed to by lpData.
	cCompoundCollision *SetTypeCompound(cCompoundCollisionFile *lpData);



    #endif

    uint8 Type();

    void Stop();

    bool CompoundCollision(cCompoundCollision* lpCompound,cMatrix4 &lcCompoundCollision, vCollisionData *lpOther,cMatrix4 &lpOtherMatrix);

};


#endif
