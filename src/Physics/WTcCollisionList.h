#ifndef __WTCCOLLISIONLIST_H__
#define __WTCCOLLISIONLIST_H__

/**
 * \brief This will form a single object in the List owned by a cCollisionList. It will store all the important data about a single collision.
 * Currently all the important data is the other cCollisionObject involved in the collision and the relative distance between teh two objects.
 * This means that the list can be generated (very slow) and then is cached to allow sorting or other user controls on filtering, Without having to test collisions again.
 * */
class cCollisionListObject
{
	cCollisionObject *mpObj;
	float mfDistance;
public:
	cCollisionListObject(cCollisionObject *lpObj){mpObj=lpObj;};
	float GetDistance(){return mfDistance;};
};

/**
 * \brief This is generated by doing Collision Detection with an object.
 * This will cache all the detected collisions with the object used for the collision detection. This allows the user to access the collisions in a different order to the order they were detected or to cache it for use later.
 * The list is composed of a list of cCollisionListObject.
 *
 * */

class cCollisionList
{


cLinkedNode<cCollisionObject> *mpCurPos;
cLinkedList<cCollisionObject> *mpCollisionList;

public:
	///The Constructor for cCollisionList
cCollisionList();
///This will Add the object lpObject to the list of objects colliding with the current searching object.
void AddCollision(cCollisionObject *lpObject);
///This will return the next item from the list mpCollisionList that has been stocked by GenerateCollisionList() as a CollisionObject pointer.
cCollisionObject *NextCollisionItem();

///This will return the process owning renderable object creating the next detected collision.
cProcess *NextCollisionP();

///This will return the renderable object involved in the next detected collision.
vRenderObject *NextCollisionR();

/// This will reset the collision search to the start of mpList.
void ResetList();

///This is the destructor for cCollisionList
~cCollisionList();
///This will sort the list of collisionobjects into distance from the colliding object order. This allows the user to resolve the collisions in 'Chronological' order.
void SortByDistance();

};

#endif