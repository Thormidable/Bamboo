<map id="G" name="G">
<area shape="rect" id="node1" href="$classc_material.html" title="A class to store material data for an object. Defines the &#39;reflectiveness&#39; of the surface..." alt="" coords="415,59,489,88"/>
<area shape="rect" id="node3" href="$classc_landscape.html" title="A height map based, matrix structured Landscape. Landscape is composed of a matrix of square polygons..." alt="" coords="569,5,660,35"/>
<area shape="rect" id="node5" href="$classc_model_list.html" title="Model list is a &#39;static&#39; render tree holding data for a series of renderable objects..." alt="" coords="572,59,657,88"/>
<area shape="rect" id="node7" href="$classc_textured_model.html" title="A standard Textured Model renderable object." alt="" coords="557,112,672,141"/>
<area shape="rect" id="node8" href="$classc_matrix4.html" title="cMatrix4" alt="" coords="33,219,105,248"/>
<area shape="rect" id="node10" href="$classv_render_object.html" title="virtual function for producing renderable objects. see cRenderObject." alt="" coords="211,219,320,248"/>
<area shape="rect" id="node12" href="$classc_render_node.html" title="This is a dynamic render tree branch. This class stores a dynamic list of cRenderObjects called mpObj..." alt="" coords="401,192,503,221"/>
<area shape="rect" id="node14" href="$classc_render_object.html" title="This class contains the base code for all renderable objects. Any renderable object should inherit th..." alt="" coords="397,245,507,275"/>
<area shape="rect" id="node16" href="$classc_beam_mesh.html" title="A Procedurally generated cylindrical Renderable Object. This class will generate a cylinder with spec..." alt="" coords="568,272,661,301"/>
<area shape="rect" id="node18" href="$classc_image.html" title="A 2D renderable object." alt="" coords="583,325,647,355"/>
<area shape="rect" id="node21" href="$classc_line.html" title="A standard renderable Line object." alt="" coords="588,379,641,408"/>
<area shape="rect" id="node24" href="$classc_particle_group.html" title="cParticleGroup" alt="" coords="561,432,668,461"/>
<area shape="rect" id="node26" href="$classc_particle_handler.html" title="cParticleHandler" alt="" coords="556,485,673,515"/>
<area shape="rect" id="node28" href="$classc_point.html" title="A Renderable object for rendering single points." alt="" coords="585,165,644,195"/>
<area shape="rect" id="node30" href="$classc_text.html" title="This class is a text renderable object." alt="" coords="588,219,641,248"/>
<area shape="rect" id="node32" href="$classc_particle_for_group.html" title="cParticleForGroup" alt="" coords="7,432,132,461"/>
<area shape="rect" id="node34" href="$classc_gravity_particle.html" title="cParticles which are affected by Gravity. These Particles have the code to be affected by the variabl..." alt="" coords="208,432,323,461"/>
<area shape="rect" id="node36" href="$classc_particle.html" title="cParticle" alt="" coords="229,379,301,408"/>
<area shape="rect" id="node38" href="$classc_wind_and_gravity_particle.html" title="cGravityParticles which are also affected by Wind. These Particles have the code to be affected by th..." alt="" coords="181,485,349,515"/>
<area shape="rect" id="node39" href="$classc_signal.html" title="Class for handling Signals sent between objects (cProcess, cRenderObject, cCollisionObject). Allows the user to wake, sleep and kill objects. For cProcess (while cParentStack is enabled) also allows signals to be sent to a process that will recursively affect all the children of that process. Possible signals to be passed in are _S_SLEEP,_S_WAKE,_S_KILL,_S_SLEEP_TREE, _S_WAKE_TREE,_S_KILL_TREE User Specified Signals are controlled by the class cUserSignal." alt="" coords="37,272,101,301"/>
<area shape="rect" id="node41" href="$classc_collision_object.html" title="cCollisionObject" alt="" coords="207,272,324,301"/>
<area shape="rect" id="node44" href="$classv_process.html" title="This is the virtual base class for a system process, see cProcess." alt="" coords="227,325,304,355"/>
<area shape="rect" id="node46" href="$classc_process.html" title="This is the base code for a process. This will automatically create a new process. It will hand itself to cKernel to be processed every frame. Any Processes created by the user should inherit this type to be handled by cKernel automatically. Initialisation code should go in the constructor of the user type. Linking to cKernel is performed automatically by cProcess. Update code should go in the function Run(). Destruction code should fo in the destructor of the user type. Code to handle interaction of two processes should go in either processes UserSignal() function." alt="" coords="413,325,491,355"/>
<area shape="rect" id="node48" href="$classc_user_signal.html" title="Class for handling user specified signals sent between classes inheriting cProcess. The function UserSignal should be defined for each object. The signals each class has defined can be independant. The code for processing the signal should be defined in UserSignal as there is no signal buffer. This should be used for dealing with Process interactions, to make a single point of detection of interaction and allowing both processes to handle the interaction. System signals (sleep, wake and kill) should be handled through cSignal." alt="" coords="23,325,116,355"/>
</map>
